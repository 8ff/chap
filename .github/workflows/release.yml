name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      releaseNote:
        description: 'Release Note'
        required: false
        default: 'Manual release'

env:
  TAG: latest
  RELEASE_NAME: Latest release
  BINARY_PREFIX: chap
  BUILD_DIR: build
  SOURCE_DIR: .

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      # ... (previous steps remain the same)

      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventName = '${{ github.event_name }}';
            const releaseNote = eventName === 'workflow_dispatch' 
              ? '${{ github.event.inputs.releaseNote || 'Manual release' }}'
              : `Automated release for commit ${process.env.GITHUB_SHA.substring(0, 7)}`;
            
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: '${{ env.TAG }}',
                name: '${{ env.RELEASE_NAME }}',
                body: releaseNote,
                draft: false,
                prerelease: false,
                generate_release_notes: true
              });
              console.log(`Release created successfully: ${release.data.html_url}`);
              return release.data.upload_url;
            } catch (error) {
              console.error(`Failed to create release: ${error.message}`);
              throw error;
            }

      - name: Upload Release Assets
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            const uploadUrl = '${{ steps.create_release.outputs.result }}';
            const buildDir = '${{ env.BUILD_DIR }}';
            
            try {
              const files = await fs.readdir(buildDir);
              console.log(`Found ${files.length} files in ${buildDir}`);
              
              for (const file of files) {
                const filePath = path.join(buildDir, file);
                const stat = await fs.stat(filePath);
                if (stat.isFile()) {
                  console.log(`Uploading ${file}...`);
                  const fileContent = await fs.readFile(filePath);
                  try {
                    const response = await github.rest.repos.uploadReleaseAsset({
                      url: uploadUrl,
                      headers: {
                        'content-type': 'application/octet-stream',
                        'content-length': fileContent.length,
                      },
                      name: file,
                      data: fileContent,
                    });
                    console.log(`Successfully uploaded ${file}`);
                  } catch (error) {
                    console.error(`Failed to upload ${file}: ${error.message}`);
                  }
                }
              }
            } catch (error) {
              console.error(`Error accessing ${buildDir}: ${error.message}`);
              throw error;
            }

      - name: Verify Release
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxRetries = 5;
            const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            
            for (let i = 0; i < maxRetries; i++) {
              try {
                console.log(`Attempting to verify release (attempt ${i + 1})...`);
                const releases = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                
                const release = releases.data.find(r => r.tag_name === '${{ env.TAG }}');
                
                if (release) {
                  console.log(`Release verification - ID: ${release.id}, Name: ${release.name}, Tag: ${release.tag_name}`);
                  return;
                } else {
                  throw new Error('Release not found');
                }
              } catch (error) {
                console.error(`Attempt ${i + 1} failed: ${error.message}`);
                if (i === maxRetries - 1) {
                  throw new Error(`Failed to verify release after ${maxRetries} attempts`);
                }
                await delay(5000); // Wait 5 seconds before retrying
              }
            }

      - name: Debug Info
        if: failure()
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          git log -1
          git status
          echo "List of releases:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases
