name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      releaseNote:
        description: 'Release Note'
        required: false
        default: 'Manual release'

env:
  TAG: latest
  RELEASE_NAME: Latest release
  BINARY_PREFIX: chap
  BUILD_DIR: build
  SOURCE_DIR: .

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      # ... (previous steps remain the same)

      - name: Create Release
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const maxRetries = 3;
            for (let i = 0; i < maxRetries; i++) {
              try {
                const release = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: '${{ env.TAG }}',
                  name: '${{ env.RELEASE_NAME }}',
                  body: '${{ github.event.inputs.releaseNote || 'Automated release' }}',
                  draft: false,
                  prerelease: false
                });
                console.log(`Release created: ${release.data.html_url}`);
                return release.data.upload_url;
              } catch (error) {
                console.error(`Attempt ${i + 1} failed: ${error.message}`);
                if (i === maxRetries - 1) throw error;
                await new Promise(r => setTimeout(r, 5000)); // Wait 5 seconds before retrying
              }
            }

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            const uploadUrl = '${{ steps.create_release.outputs.result }}';
            const buildDir = '${{ env.BUILD_DIR }}';
            
            const files = await fs.readdir(buildDir);
            for (const file of files) {
              const filePath = path.join(buildDir, file);
              const stat = await fs.stat(filePath);
              if (stat.isFile()) {
                console.log(`Uploading ${file}...`);
                const fileContent = await fs.readFile(filePath);
                try {
                  const response = await github.rest.repos.uploadReleaseAsset({
                    url: uploadUrl,
                    headers: {
                      'content-type': 'application/octet-stream',
                      'content-length': fileContent.length,
                    },
                    name: file,
                    data: fileContent,
                  });
                  console.log(`Successfully uploaded ${file}`);
                } catch (error) {
                  console.error(`Failed to upload ${file}: ${error.message}`);
                  throw error;
                }
              }
            }

      - name: Check release status
        if: failure()
        run: |
          echo "Release creation or asset upload failed. Check the logs for more information."
          exit 1
